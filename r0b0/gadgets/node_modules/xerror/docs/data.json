{
    "project": {
        "name": "xerror",
        "description": "Extended Error",
        "version": "1.0.0"
    },
    "files": {
        "error-code-registry.js": {
            "name": "error-code-registry.js",
            "modules": {},
            "classes": {
                "ErrorCodeRegistry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "xerror.js": {
            "name": "xerror.js",
            "modules": {},
            "classes": {
                "XError": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "ErrorCodeRegistry": {
            "name": "ErrorCodeRegistry",
            "shortname": "ErrorCodeRegistry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "XError"
            ],
            "file": "error-code-registry.js",
            "line": 15,
            "description": "Central registry for error codes."
        },
        "XError": {
            "name": "XError",
            "shortname": "XError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "xerror.js",
            "line": 4,
            "description": "Construct a Extended Error instance.\nAll parameters are optional, with the exception that a code is required if a message is given, and\nthat data is required if privateData is given.",
            "is_constructor": 1,
            "extends": "Error",
            "uses": [
                "ErrorCodeRegistry"
            ],
            "params": [
                {
                    "name": "code",
                    "description": "- The error code of the error.  These are short string codes.  They may not contain spaces.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"internal_error\""
                },
                {
                    "name": "message",
                    "description": "- Human-readable error message.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "- Additional data about the error.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "privateData",
                    "description": "- Data that should be considered private to the application and is not displayed to users.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cause",
                    "description": "- The error which caused this error.  Used to create error cause chains.",
                    "type": "Error|XError",
                    "optional": true
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "error-code-registry.js",
            "line": 22,
            "description": "Registers an error code with the central registry.",
            "itemtype": "method",
            "name": "registerErrorCode",
            "static": 1,
            "params": [
                {
                    "name": "code",
                    "description": "- The error code to register",
                    "type": "String"
                },
                {
                    "name": "fields",
                    "description": "- Informational fields about the error",
                    "type": "Object",
                    "props": [
                        {
                            "name": "message",
                            "description": "- Error message associated with the code",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "aliasOf",
                            "description": "- If this error code is an alias, this is the code it is aliased to",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "http",
                            "description": "- HTTP response code associated with the error",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "version",
                    "description": "- The version of error fields; if the same code is registered multiple times,\nthe higher version takes precedence.  This defaults to 1.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "ErrorCodeRegistry"
        },
        {
            "file": "error-code-registry.js",
            "line": 61,
            "description": "Register multiple error codes at the same time.",
            "itemtype": "method",
            "name": "registerErrorCodes",
            "static": 1,
            "params": [
                {
                    "name": "codes",
                    "description": "- Mapping from code strings to fields",
                    "type": "Object"
                },
                {
                    "name": "version",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "ErrorCodeRegistry"
        },
        {
            "file": "error-code-registry.js",
            "line": 75,
            "description": "Fetches information about error codes.  The returned object may include the fields\n'code' (useful if the error code is aliased to a different code), 'message' (default\nerror message), 'http' (associated http code).  Any of these fields may be missing.",
            "itemtype": "method",
            "name": "getErrorCode",
            "static": 1,
            "params": [
                {
                    "name": "code",
                    "description": "- The error code to fetch",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- Information about the returned error",
                "type": "Object"
            },
            "class": "ErrorCodeRegistry"
        },
        {
            "file": "error-code-registry.js",
            "line": 96,
            "description": "Returns a list of error code strings.",
            "itemtype": "method",
            "name": "listErrorCodes",
            "static": 1,
            "return": {
                "description": "- List of error codes",
                "type": "String[]"
            },
            "class": "ErrorCodeRegistry"
        },
        {
            "file": "error-code-registry.js",
            "line": 107,
            "description": "Add an XError constructor to the list.  Used to manage different versions\nof XError.",
            "itemtype": "method",
            "name": "addXError",
            "static": 1,
            "params": [
                {
                    "name": "XError",
                    "description": "- XError constructor",
                    "type": "Function"
                }
            ],
            "class": "ErrorCodeRegistry"
        },
        {
            "file": "xerror.js",
            "line": 87,
            "description": "Returns a string representation of the error.  This is not necessarily consumer-friendly.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "- String representation of the error",
                "type": "String"
            },
            "class": "XError"
        },
        {
            "file": "xerror.js",
            "line": 100,
            "description": "Converts the information inside this XError object into a plain object suitable\nfor stringifying or otherwise transmitting.",
            "itemtype": "method",
            "name": "toObject",
            "params": [
                {
                    "name": "options",
                    "description": "- Options regarding the conversion",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "includePrivateData",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "includeStack",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "extraFields",
                            "description": "- Extra fields to include in the object",
                            "type": "String[]",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "XError"
        },
        {
            "file": "xerror.js",
            "line": 141,
            "description": "Instantiates and returns a new XError object from the given object.",
            "itemtype": "method",
            "name": "fromObject",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "XError"
            },
            "class": "XError"
        },
        {
            "file": "xerror.js",
            "line": 157,
            "description": "Returns true iff the given value is an instance of a XError.",
            "itemtype": "method",
            "name": "isXError",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "- Thing to determine if it's an XError",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "XError"
        },
        {
            "file": "xerror.js",
            "line": 169,
            "description": "Wraps an error in another XError.  If an XError is passed in, this is equivalent to:\nnew XError(error.code, message || error.message, error.data, error.privateData, error)\nIf a non-xerror is passed in, this is equivalent to:\nnew XError(XError.INTERNAL_ERROR, message || error.message || 'An error occurred', error)\n\nThis is useful to wrap errors that occur in a deep layer with shallower-layer errors to provide a more\ninformative error message to the user.  It also has the effect of adding a stack track, which can help\nin debugging.",
            "itemtype": "method",
            "name": "wrap",
            "static": 1,
            "params": [
                {
                    "name": "error",
                    "description": "- Error to wrap",
                    "type": "Error|ZSError"
                },
                {
                    "name": "message",
                    "description": "- Optional message override",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "- Wrapped ZSError",
                "type": "ZSError"
            },
            "class": "XError"
        }
    ],
    "warnings": []
}